#! /bin/bash
#
# makedist:  build the package's distributions
#
# This script is designed to run without any arguments: this will build
# all of the available distributions.  Restricting the build to specific
# distributions can be done by listing the names of the desired distributions
# on the command line.
#
# The following distributions can be built with this script:
#   midas-author-wizard
#   midas-author-lps
#   pdr-lps
#   pdr-rpa-request
#   pdr-rpa-approve
#
# The following synonyms are provided for backward compatability:
#   editable -- for midas-author-lps
#   wizard   -- for midas-author-wizard
#
# The following macros are also supported:
#   midas-author -- builds both midas-author-lps and midas-author-wizard
#   pdr-rpa      -- builds both pdr-rpa-request and pdr-rpa-approve
#   angular      -- builds all available angular distributions
#
# SYNOPSIS
#    makedist [OPTIONS] [DISTNAME ...]
#
# OPTIONS
#    -l, --list               list the names of the supported distributions and
#                             exit without building.
#    --dist-dir=DIR           The output directory to write the distribution
#                             products into.
#    -d DIR, --source-dir=DIR  the directory containing the python source code
#                             (default: .)
#    -c DIR, --cache-dir=DIR  directory for holding intermediate or cache-able
#                             products; if provided, the node_modules cache will
#                             be located and used from here.  This can be shared
#                             with other similar packages to avoid redundant 
#                             re-building of nodejs dependency modules
#    -v VER, --version=VER    assign VER as the VERSION for this product
#    
#

set -e
prog=`basename $0`
execdir=`dirname $0`
[ "$execdir" = "" -o "$execdir" = "." ] && execdir=$PWD
PACKAGE_DIR=`dirname $execdir`
[ "$PACKAGE_DIR" = "" -o "$PACKAGE_DIR" = "." ] && PACKAGE_DIR=$PWD
SOURCE_DIR=$PACKAGE_DIR

# this is needed because realpath is not on macs
function realpath {
    if [ -d "$1" ]; then
        (cd $1 && pwd)
    elif [ -f "$1" ]; then
        file=`basename $1`
        parent=`dirname $1`
        realdir=`(cd $parent && pwd)`
        echo "$realdir/$file"
    elif [[ $1 = /* ]]; then
        echo $1
    else
        echo "$PWD/${1#./}"
    fi
}

# Update this list with the names of the individual component names
#
midas_author_names="midas-author-wizard midas-author-lps"
pdr_rpa_names="pdr-rpa-request pdr-rpa-approve"
DISTNAMES="$midas_author_names"
declare -A APPSRCDIR=(                        \
    [midas-author-wizard]=midas-author/wizard \
    [midas-author-lps]=midas-author/lps       \
    [pdr-rpa-request]=pdr-rpa/pdr-rpa-request \
    [pdr-rpa-approve]=pdr-rpa/pdr-rpa-approve \
)

# handle command line options
while [ "$1" != "" ]; do 
  case "$1" in
    --list|-l)
        echo "Available distributions: $DISTNAMES"
        exit 0
        ;;
    --dist-dir=*)
        DIST_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    --dist-dir)
        shift
        DIST_DIR=$1
        ;;
    --source-dir=*|--dir=*)
        SOURCE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        ;;
    -d|--dir|--source-dir)
        shift
        SOURCE_DIR=$1
        ;;
    --cache-dir=*)
        CACHE_DIR=`echo $1 | sed -e 's/[^=]*=//'`
        # NOTE: CACHE_DIR is ignored
        ;;
    -c|--cache-dir)
        shift
        CACHE_DIR=$1
        # NOTE: CACHE_DIR is ignored
        ;;
    angular)
        build_dist=${DISTNAMES}
        ;;
    midas-author)
        build_dist="$build_dist $midas_author_names"
        ;;
    wizard)
        build_dist="$build_dist midas-author-wizard"
        ;;
    editable)
        build_dist="$build_dist midas-author-lps"
        ;;
    -*)
        echo "$prog: unsupported option:" $1
        false
        ;;
    *)
        (echo :${DISTNAMES}: | sed -e 's/ /:/g' | grep -qs :${1}:) || {
            echo "${prog}: ${1}: unrecognized distribution name"
            echo "${prog}: recognized names:" $DISTNAMES
            false
        }
        build_dist="$build_dist $1"
        ;;
  esac
  shift
done
[ -n "$build_dist" ] || build_dist=$DISTNAMES
build_dist=`echo $build_dist | sed -e 's/ /\n/g' | sort -u`
echo '#' Building $build_dist

true ${DIST_DIR:=$PACKAGE_DIR/dist}
mkdir -p $DIST_DIR

echo "# Building from $SOURCE_DIR..."
cd $SOURCE_DIR || {
    echo ${prog}: Unable to change into $SOURCE_DIR
    false
}

# set the current version.  This will inject the version into the code, if 
# needed.
#
# set -x
echo '+' scripts/setversion.sh
scripts/setversion.sh 
[ -n "$PACKAGE_NAME" ] || PACKAGE_NAME=`cat VERSION | awk '{print $1}'`
version=`cat VERSION | awk '{print $2}'`
vers4fn=`echo $version | sed -re 's#[/ \t]+#_#g'`

npmpfx=
[ -z "$CACHE_DIR" ] || npmpfx="--prefix $CACHE_DIR"

# install required modules
npmvers=`npm --version`
echo '+' npm install --legacy-peer-deps
npm $npmpfx install --legacy-peer-deps

# build oarng
echo '+' npm $npmpfx run build-lib
npm $npmpfx run build-lib

# build the oar-lps library (needed by both rpa apps and pdr-lps)
if (echo "$build_dist" | sed -e 's/ /\n/g' | grep -qs midas-author-lps); then
    echo '+' npm $npmpfx run build-oarlps
    npm $npmpfx run build-oarlps
fi

# build target distributions
declare -A buildscript
buildscript=(                            \
    ["pdr-lps"]=build-pdrlps             \
    ["midas-author-wizard"]=build-sw     \
    ["midas-author-lps"]=build-midaslps  \
)

for target in $build_dist; do
    distname="${target}-$vers4fn"
    builddir="${APPSRCDIR[$target]}/dist"

    echo '##############################################'
    echo '#'
    echo "# Building $distname"...
    echo '#'
    echo '##############################################'

    # build the code
    echo '+' npm $npmpfx run ${buildscript[$target]}
    npm $npmpfx run ${buildscript[$target]}

    # zip up the distribution
    echo '+' '(cd $builddir' '&&' \
             "zip -qr $DIST_DIR/${distname}.zip *)"
    (cd $builddir && zip -qr $DIST_DIR/${distname}.zip *)

    # create the dependency file
    if [ -f "package-lock.json" ]; then
        echo '+' $execdir/record_npm_deps.py $target $version package-lock.json \
                 $npmvers \> $DIST_DIR/${distname}_dep.json
        $execdir/record_npm_deps.py $target $version package-lock.json $npmvers \
                                    > $DIST_DIR/${distname}_dep.json
    else
        echo ${prog}: WARNING: Unable to create dependency file for ${dist}: \
             package-lock.json not found
    fi
done
